#!/bin/bash -eu

# command line parameters

command="up" # "up" or "down"

vid="0x1d6b" # Linux Foundation
pid="0x0104" # Multifunction Composite Gadget 
devversion="0x0001" # this should be incremented any time there are breaking changes
                # to this script so that the host OS sees it as a new device and
                # re-enumerates everything rather than relying on cached values

usb_ver="0x0200" # USB 2.0
dev_class="0xef"  
dev_sub_class="0x02"  
dev_protocol="0x01"  

manufacturer="Pub 10 Cloud"
product="Pi Zero Gadget"
serial="deadbeef00115599"
udc_device=""
verbose=1

storage_file="/dev/mmcblk0p3"
mount_point="/mnt/share"

for arg in "$@"; do
  shift
  case $arg in
    up|down|reset) command=$arg ;;
    -h|--help|"-?"|"?") command="h" ;;
    -v) verbose=$1 ;;
  esac  
done

if [ "$command" = "" ]; then command=h; fi
if [ -z "$verbose" ]; then verbose=1 ;fi

if [ "$command" != "h" ]; then
  if [ "$udc_device" = "" ]; then
   udc_device=$(ls /sys/class/udc)
  fi
  if [ "$verbose" -gt "0" ];then echo "UDC Device: $udc_device"; fi
fi

if [ "$verbose" -gt "2" ];then
  echo debug: params: $vid,$pid,$manufacturer,$product,$serial,$devversion,$udc_device,Verbose=$verbose
fi

g="/sys/kernel/config/usb_gadget/multi-gadget"

un_usb_up() {
    modprobe libcomposite

    if [ -d ${g} ]; then
        if [ "$(cat ${g}/UDC)" != "" ]; then
            if [ "$verbose" -gt "0" ];then echo "Gadget is already up."; fi
            exit 1
        fi
        if [ "$verbose" -gt "0" ];then echo "Cleaning up old directory..."; fi
        un_usb_down
    fi
    if [ "$verbose" -gt "0" ];then echo "Setting up gadget..."; fi
       
    # Create a new gadget
    mkdir ${g}
    echo "${vid}"           > ${g}/idVendor
    echo "${pid}"           > ${g}/idProduct
    echo "${devversion}"    > ${g}/bcdDevice
    echo "${usb_ver}"       > ${g}/bcdUSB
    echo "${dev_class}"     > ${g}/bDeviceClass
    echo "${dev_sub_class}" > ${g}/bDeviceSubClass
    echo "${dev_protocol}"  > ${g}/bDeviceProtocol

    mkdir ${g}/strings/0x409
    echo "${serial}"        > ${g}/strings/0x409/serialnumber
    echo "${manufacturer}"  > ${g}/strings/0x409/manufacturer
    echo "${product}"       > ${g}/strings/0x409/product

    # config 1
    mkdir ${g}/configs/c.1
    echo 250                > ${g}/configs/c.1/MaxPower
    mkdir ${g}/configs/c.1/strings/0x409
    echo "Multi Gadget"     > ${g}/configs/c.1/strings/0x409/configuration

    # RNDIS - Register this first
    mkdir -p ${g}/functions/rndis.usb0
 
    # Set up MAC addresses
    smac=$(cat /sys/class/net/wlan0/address)
    dev_mac="22$(echo ${smac} | cut -b 3-)"
    host_mac="32$(echo ${smac} | cut -b 3-)"
    echo "${dev_mac}"  > ${g}/functions/rndis.usb0/dev_addr
    echo "${host_mac}" > ${g}/functions/rndis.usb0/host_addr  

    ln -s ${g}/functions/rndis.usb0 ${g}/configs/c.1/

    # Serial
    mkdir -p ${g}/functions/acm.usb0
    ln -s ${g}/functions/acm.usb0 ${g}/configs/c.1/

    # Mass Storage
    mkdir -p ${g}/functions/mass_storage.usb0
    echo 1 > ${g}/functions/mass_storage.usb0/stall
    echo 0 > ${g}/functions/mass_storage.usb0/lun.0/cdrom
    echo 0 > ${g}/functions/mass_storage.usb0/lun.0/ro
    echo 0 > ${g}/functions/mass_storage.usb0/lun.0/nofua
    echo 1 > ${g}/functions/mass_storage.usb0/lun.0/removable
    echo $storage_file > ${g}/functions/mass_storage.usb0/lun.0/file
    ln -s ${g}/functions/mass_storage.usb0 ${g}/configs/c.1/

    # OS descriptors
    echo 1       > ${g}/os_desc/use
    echo 0xcd    > ${g}/os_desc/b_vendor_code  # Microsoft
    echo MSFT100 > ${g}/os_desc/qw_sign        # Microsoft

    # matches Windows RNDIS Drivers
    echo RNDIS   > ${g}/functions/rndis.usb0/os_desc/interface.rndis/compatible_id
    # matches Windows RNDIS 6.0 Driver
    echo 5162001 > ${g}/functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id

    ln -s ${g}/configs/c.1 ${g}/os_desc

    # Wait for udev to settle
    udevadm settle -t 5 || :

    # Create USB Gadget
    echo "${udc_device}" > ${g}/UDC
    
    if [ -n "$verbose" ]; then echo "Done."; fi

    # Set up RNDIS
    ifconfig usb0 192.168.44.1 netmask 255.255.255.0 up

    # Start getty
    systemctl start getty@ttyGS0.service

    # Mount storage
    mkdir -p ${mount_point}
    mount -o loop,rw,offset=1048576 -t vfat $storage_file $mount_point > /dev/null 2>&1 || :

}
un_usb_reset() {
    un_usb_down
    un_usb_up
}
un_usb_down() {
    if [ ! -d ${g} ]; then
        if [ "$verbose" -gt "0" ];then echo "Gadget is already down."; fi
        exit 1
    fi
    if [ "$verbose" -gt "0" ];then echo "Taking down gadget..."; fi

    # Unmount storage
    umount ${mount_point} || :

    # Stop getty
    systemctl stop getty@ttyGS0.service

    # Set down RNDIS
    ifconfig usb0 down || :

    # Have to unlink and remove directories in reverse order.
    # Checks allow to finish takedown after error.

    if [ "$(cat ${g}/UDC)" != "" ]; then
        echo "" > ${g}/UDC
    fi

    rm -f ${g}/configs/c.1/acm.usb0
    rm -f ${g}/os_desc/c.1
    rm -f ${g}/configs/c.1/rndis.usb0
    rm -f ${g}/configs/c.1/mass_storage.usb0
    [ -d ${g}/functions/acm.usb0 ] && rmdir ${g}/functions/acm.usb0
    [ -d ${g}/functions/rndis.usb0 ] && rmdir ${g}/functions/rndis.usb0
    [ -d ${g}/functions/mass_storage.usb0 ] && rmdir ${g}/functions/mass_storage.usb0
    [ -d ${g}/configs/c.1/strings/0x409 ] && rmdir ${g}/configs/c.1/strings/0x409
    [ -d ${g}/configs/c.1 ] && rmdir ${g}/configs/c.1
    [ -d ${g}/strings/0x409 ] && rmdir ${g}/strings/0x409

    rmdir ${g}

    if [ -n "$verbose" ]; then echo "Done."; fi
}

case ${command} in
up)
    un_usb_up
    ;;
down)
    un_usb_down
    ;;
reset)
    un_usb_reset
    ;;
*)
  echo "Multi Gadget Setup Script"
  echo " "
  echo "Usage: $0 up|down|reset [options]"
  echo " options:"
  echo " --------"
  echo " up       activate"
  echo " down     deactivate"
  echo " reset    reset storage"
  echo " -v       set verbose level 0..3"
  echo " -h|--help|-?|?   info"
  exit 1
    ;;
esac

#--- eof ---
